openapi: 3.0.0
# Document header
info:
  title: delilah-resto
  description: Description of the store management endpoints.
  version: 1.0.0
  
# Available server instances for paths
servers:
- url: /v1

# Tags
tags:
  - name: Auth
  - name: User
  - name: Dishes
  - name: Orders

# Path routes
paths:
  /login:
    get:
      summary: Get token
      description: Pass as query arguments username and password
      tags:
        - Auth
      parameters:
        - in: query
          name: username
          schema:
            type: string
            example: queen_freddie
          required: true
        - in: query
          name: password
          schema:
            type: string
            format: password
            example: my_personal_password
          required: true
      responses:
        200:
          description: OK
          content:    
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        401:
          description: Invalid username or password
  /users:
    get:
      summary: Returns all users
      description: Only admin can query
      tags:
        - User
      security: 
        - bearerAuth: []
      responses:
        201:
          description: Created
          content:    
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'    
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new user
      description: Create a new user passing in its body the corresponding object
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_new'
      responses:
        201:
          description: Created
          content:    
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Incorrect information given
  /users/{id}:
    get:
      summary: Get user's information
      description: Admin will be able to fetch any info. User only can view its own
      tags:
        - User
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: User's ID
          required: true
          schema:
            type: integer
            example: 512
      responses:
        200:
          description: Ok
          content:    
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update user's information
      description: Admin will be able to change any info. User only can edit its own
      tags:
        - User
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: User's ID
          required: true
          schema:
            type: integer
            example: 512
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_new'
      responses:
        200:
          description: Ok
          content:    
            application/json:
              schema:
                $ref: '#/components/schemas/user_min'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete user
      description: Admin will be able to delete any user. User is not allowed
      tags:
        - User
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: User's ID
          required: true
          schema:
            type: integer
            example: 512
      responses:
        204:
          description: User was deleted.
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}/dishes:
    get:
      summary: Get user's favourite dishes
      description: Returns all plates requested by user ordered by consume quantity
      tags:
        - Dishes
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: User's ID
          required: true
          schema:
            type: integer
            example: 512
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dish_accum'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /dishes:
    get:
      summary: Get all available dishes
      tags:
        - Dishes
      security: 
        - bearerAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dish'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new dish
      tags:
        - Dishes
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dish_min'
      responses:
        201:
          description: Dish was created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dish'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /dishes/{id}:
    get:
      summary: Get dish
      tags:
        - Dishes
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Dish's ID
          required: true
          schema:
            type: integer
            example: 666
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dish'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Modify dish's information
      tags:
        - Dishes
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Dish's ID
          required: true
          schema:
            type: integer
            example: 666
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dish_min'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dish'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete dish
      tags:
        - Dishes
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Dish's ID
          required: true
          schema:
            type: integer
            example: 666
      responses:
        204:
          description: Dish was deleted.
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /orders:
    get:
      summary: Returns all orders depending on params
      description: If no param if specified, orders from current day will be fetched. Before and after filters together and "at" add the date to the filter result
      tags:
        - Orders
      parameters:
        - in: query
          name: at
          description: Filter orders based on exact ISO date.
          example: "2020-06-15"
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: before
          description: Filter orders before or equal ISO date.
          example: "2020-04-15"
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: after
          description: Filter orders after or equal ISO date.
          example: "2020-01-01"
          required: false
          schema:
            type: string
            format: date
      security: 
        - bearerAuth: []
      responses:
        201:
          description: Array of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a new order for the user
      description: User's ID will be found inside token, so it's not necessary
      tags:
        - Orders
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_new'
      responses:
        201:
          description: Created
          content:    
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /orders/{id}:
    get:
      summary: Get order info
      tags:
        - Orders
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Order ID
          required: true
          schema:
            type: integer
            example: 36
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update order status
      tags:
        - Orders
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: Order ID
          required: true
          schema:
            type: integer
            example: 36
        - in: query
          name: state
          description: New state of the order
          example: 2
          required: true
          schema:
            type: number
      responses:
        201:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        401:
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzQ1Njc4OTAiLCJpYXQiOjE1MTYyMzkwMjJ9.C7eecdX_pumR-P1Kv3q3fkp27Jtian0VJKy4XpStmt8
    user_min:
      type: object
      properties:
        full_name:
          type: string
          example: Freddie Mercury
        username:
          type: string
          example: queen_freddie
        email:
          type: string
          example: freddiemercury@gmail.com
        phone:
          type: string
          example: +447712345678
        address:
          type: string
          example: Maipu 999 1º A
    user_new:
      allOf:
        - $ref: "#/components/schemas/user_min"
        - type: object
          properties:
            password:       # Password is required
              type: string
              example: my_personal_password
    user:
      allOf:
        - type: object
          properties:
            id:             # id num is added
              type: number
              example: 5487
        - $ref: '#/components/schemas/user_min'
        - type: object
          properties:
            id_security_type: # Admin / User
              type: number
              example: 1
    dish_new:
      type: object
      properties:
        id:
          type: number
          example: 15
        quantity:
          type: number
          example: 3
    dish_min:
      type: object
      properties:
        name:
          type: string
          example: Hamburguesa Clásica
        name_short:
          type: string
          example: HamClas
        description:
          type: string
          example: Hamburguesa 200g de carne, con lechuga y tomate.
        price:
          type: number
          example: 350
        img_path:
          type: string
          example: ./src/img/ham-clas.png
        is_available:
          type: boolean
          example: true     
    dish:
      allOf:
        - type: object
          properties:
            id:
              type: number
              example: 666
        - $ref: "#/components/schemas/dish_min"
    dish_accum:
      allOf:
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/dish'
        - type: object  
          properties:
            accumulated:
              type: number
              example: 20
              description: Number of times the user's requested dish.
    ordered_dishes:
      type: array
      items:
        allOf:
          - type: object
            properties:
              dish:
                $ref: '#/components/schemas/dish'
          - type: object  
            properties:
              ordered:
                type: number
                example: 3
                description: Number of dish ordered
              purchased_price:
                type: number
                example: 250
                description: Price in which the dish was purchased
              subtotal:
                type: number
                example: 750
                description: Subtotal purchased.
    order_new:
      type: object
      properties:
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/dish_new"
        payment_type:
          type: number
          example: 2
        address:
          type: string
          example: Montevideo 1212 1B
    order:
      type: object
      properties:
        id:
          type: number
          example: 5412
        number:
          type: integer
          example: 500
        address:
          type: string
          example: Montevideo 1212 1B
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        description:
          type: string
          example: 1xHamClas 1xSandVegg
        status:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                example: En Preparaciòn
              timestamp:
                type: string
                format: date-time
        user:
          $ref: "#/components/schemas/user"
        payment:
          type: object
          properties:
            type:
              type: number
              example: 2
            total:
              type: number
              example: 650
        dishes:
          $ref: "#/components/schemas/ordered_dishes"

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid       
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes